//tentativa com josn 
//https://randomnerdtutorials.com/decoding-and-encoding-json-with-arduino-or-esp8266/


#include <WiFi.h>
#include <WiFiClient.h>
#include <WebServer.h>
#include <WiFiUdp.h>//Biblioteca do UDP.
#include "time.h"
#include "index.h" //Our HTML webpage contents with javascripts
//=================================================================================================================
#define LED 2  //On board LED
//definindo gpio usadas
#define EX1 21
#define EX2 22
#define EX3 23
#define EX4 25
#define EX5 26
//somente para teste 
#define EX10 44
//======================parte do ip fixa===========================================================================
const char* ssid = "GAM_RF";
const char* password = "";
IPAddress local_IP(10,20,3,81);
IPAddress gateway(10,20,3,254);
IPAddress subnet(255,255,255,0);
IPAddress primaryDNS(172, 17, 156, 209); //optional
IPAddress secondaryDNS(8, 8, 8, 8); 
//======================parte do ip fixa===========================================================================


//=================================================================================================================
const char* ntpServer = "pool.ntp.org"; //parte para pegar data da internet
const long  gmtOffset_sec = 0;
//ajuste de fuso 
const int   daylightOffset_sec = -3600*3;
String asString;

//parte dos sensores========================================================================
WiFiUDP udp;//Cria um objeto da classe UDP.
String req,tipodesensor,clientenumero;//String que armazena os dados recebidos pela rede.
String sensorE;
String sensorI;
// =============================================================================================

WebServer server(80); //Server on port 80

//=================================================================================================================
// rotina que abre a pagina da internet
//=================================================================================================================
void handleRoot() {
 String s = MAIN_page; //Read HTML contents
 server.send(200, "text/html", s); //Send web page
}
//=================================================================================================================
void HorarioInternet() {
  String adcValue = asString;                                                   
 server.send(200, "text/plane", adcValue); //Send ADC value only to client ajax request
}
//===================================================SENSOR EXTERNO======================================================

void handleADC1() {
  String adcValue1 = sensorE;                                               
 server.send(200, "text/plane", adcValue1); //Send ADC value only to client ajax request
}
//======================================================================================================================

//===================================================SENSOR INTERNO======================================================

void handleADC2() {
  String adcValue2 = sensorI;                                               
 server.send(200, "text/plane", adcValue2); //Send ADC value only to client ajax request
}
//======================================================================================================================

//====================================================================modo inverno=================================
void handleLED5() {
 String led6State = "ON";
 String t6_state = server.arg("LED6state"); //Refer  xhttp.open("GET", "setLED?LEDstate="+led, true);
 Serial.println(t6_state);
 if(t6_state == "1")
 {
  //aqui vai a lógica se o modo inverno estiver ligado
  digitalWrite(LED,LOW); 
  Serial.println("desligou inverno");
  led6State = "OFF"; //Feedback parameter
 }
 else
 {
  digitalWrite(LED,HIGH);
   Serial.println("Ligou inverno");
  led6State = "ON"; //Feedback parameter  
 }
  server.send(200, "text/plane", led6State); //Send web page
}



//===============================================================================================================
                                                    //SETUP//
//===============================================================================================================
void setup(void){
  Serial.begin(115200);
  WiFi.begin(ssid, password);     //Connect to your WiFi router
  WiFi.config(local_IP,gateway,subnet,secondaryDNS);
  Serial.println("");
 
  //Onboard LED port Direction output
  pinMode(LED,OUTPUT); 
  
  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }


  //If connection successful show IP address in serial monitor
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());  //IP address assigned to your ESP
  //Serial.println(WiFi.subnetMask()); 
  //Serial.println(WiFi.gatewayIP()); 
  // Serial.print("Nome Host: ");
  //Serial.println(WiFi.getHostname());
  //Serial.println(WiFi.dnsIP());

//===================parte do horario na rede==================================================================
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  printLocalTime();
//=============================================================================================================
  server.on("/", handleRoot);      //Which routine to handle at root location. This is display page
  server.on("/setLED5", handleLED5);
  server.on("/readADC", HorarioInternet);
  server.on("/readADC1", handleADC1);
  server.on("/readADC2", handleADC2);
 
  server.begin();                  //Start server
  Serial.println("HTTP server started");
  udp.begin(555);//Inicializa a recepçao de dados UDP na porta 555
  Serial.println("Escutando na porta 555");
  
}

//=======================================================funcao tempo============================================
void printLocalTime()
{
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("Falha ao obter a hora");
    return;
  }
   char timeStringBuff[50]; //50 chars should be enough
  strftime(timeStringBuff, sizeof(timeStringBuff), "%A, %B %d %Y %H:%M:%S", &timeinfo);
  //print like "const char*"
  //Serial.println(timeStringBuff);
  //Optional: Construct String object 
   asString = timeStringBuff;
   
}

void LeituraSensores()
{
	
   if (udp.parsePacket() > 0)//Se houver pacotes para serem lidos
  {
    req = "";//Reseta a string para receber uma nova informaçao
    while (udp.available() > 0)//Enquanto houver dados para serem lidos
    {
      char z = udp.read();//Adiciona o byte lido em uma char
      req += z;//Adiciona o char à string
    }

    //Após todos os dados serem lidos, a String estara pronta.

    Serial.println(req);//Printa a string recebida no Serial monitor.
     int posicao = req.indexOf("*");
       tipodesensor = req.substring(0,1);
       clientenumero = req.substring(1,3);
       sensorI = req.substring(3,posicao);
       sensorE = req.substring(posicao + 1);
       Serial.println("Tipo de Sensor = " + tipodesensor);
       Serial.println("Cliente Numero = " + clientenumero);
       Serial.println("Valor Lido");
       Serial.println(req);
       Serial.println("Sensor Interno");
       Serial.println(sensorI); 
       Serial.println("Sensor Externo");
       Serial.println(sensorE); 

  }
	
}
//===============================================================================================================
//                                                           LOOP
//===============================================================================================================
void loop(void){
  server.handleClient();          //Handle client requests
  printLocalTime();
  LeituraSensores();
 }
